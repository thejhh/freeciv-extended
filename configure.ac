dnl configure.ac for freeciv
dnl Process this file with autoconf to produce a configure script.

dnl Initialize with some random file to ensure the source is here.
AC_INIT([freeciv], m4_esyscmd([./fc_version | tr -d '\n']))
AC_PREREQ(2.59)
AC_CONFIG_SRCDIR([common/game.c])
AC_CONFIG_AUX_DIR(bootstrap) # This can't be quoted or automake will fail
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_HEADERS([config.h])
AC_CANONICAL_HOST
AC_GNU_SOURCE

BUG_URL="http://gna.org/projects/freeciv/"
WIKI_URL="http://www.freeciv.org/"
MAIL_ADDRESS="freeciv-dev AT gna.org"

AC_DEFINE(FC_CONFIG_H, 1, [Configuration autogenerated])
AC_DEFINE_UNQUOTED([BUG_URL], ["$BUG_URL"], [Bug reporting URL])
AC_DEFINE(META_URL, "http://meta.freeciv.org/metaserver.phtml", [Meta server URL])
AC_DEFINE_UNQUOTED([WIKI_URL], ["$WIKI_URL"], [Informational URL])

AC_DEFINE(DEFAULT_SOCK_PORT, 5556, [Connection TCP Port])

AC_SUBST([BUG_URL])
AC_SUBST([WIKI_URL])
AC_SUBST([MAIL_ADDRESS])

dnl client/server should always have the same major and minor versions
dnl different patch versions are compatible
VERSION_SCRIPT_SILENT=yes
m4_include(fc_version)

VERSION_WITHOUT_LABEL=${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}
VERSION=${VERSION_WITHOUT_LABEL}${VERSION_LABEL}

AC_DEFINE_UNQUOTED([MAJOR_VERSION], [$MAJOR_VERSION], [Major version])
AC_DEFINE_UNQUOTED([MINOR_VERSION], [$MINOR_VERSION], [Minor version])
AC_DEFINE_UNQUOTED([PATCH_VERSION], [$PATCH_VERSION], [Patch version])
AC_DEFINE_UNQUOTED([VERSION_LABEL], ["${VERSION_LABEL}"], [Version label])
AC_DEFINE_UNQUOTED([VERSION_STRING], ["${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}${VERSION_LABEL}"], [Version string])
AC_DEFINE_UNQUOTED([IS_DEVEL_VERSION], [$IS_DEVEL_VERSION], [Is this a devel version])
AC_DEFINE_UNQUOTED([IS_BETA_VERSION], [$IS_BETA_VERSION], [Is this a beta version])
AC_DEFINE_UNQUOTED([NEXT_STABLE_VERSION], ["$NEXT_STABLE_VERSION"], [Version number of next release])
AC_DEFINE_UNQUOTED([RELEASE_MONTH], [$RELEASE_MONTH], [Month next version will be released])
AC_SUBST([MAJOR_VERSION])
AC_SUBST([MINOR_VERSION])

AC_DEFINE_UNQUOTED([NETWORK_CAPSTRING_MANDATORY],
		   ["$NETWORK_CAPSTRING_MANDATORY"],
		   [Network capability string])
AC_SUBST([NETWORK_CAPSTRING_MANDATORY])
AC_DEFINE_UNQUOTED([NETWORK_CAPSTRING_OPTIONAL],
		   ["$NETWORK_CAPSTRING_OPTIONAL"],
		   [Additional optional network capabilities])
AC_SUBST([NETWORK_CAPSTRING_OPTIONAL])

AC_DEFINE_UNQUOTED([DATASUBDIR],
                   ["$DATASUBDIR"],
                   [Version specific subdir for default data path])
AC_SUBST([DATASUBDIR])

dnl Initialize automake stuff
AM_INIT_AUTOMAKE

dnl Use Automake 1.11 silent rules by default if available
dnl verbose build using  make V=1
ifdef([AM_SILENT_RULES],[AM_SILENT_RULES([yes])])

dnl checks for mysql, sets AUTH_LIBS, AUTH_CFLAGS
FC_CHECK_AUTH

dnl  no=do not compile server,  yes=compile server,  *=error
AC_ARG_ENABLE(server,
[  --disable-server        do not compile the server],
[case "${enableval}" in
  yes) server=yes ;;
  no)  server=no ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for --disable-server) ;;
esac], [server=yes])
AM_CONDITIONAL(SERVER, test x$server = xyes)

dnl yes     - Support for IPv6 required
dnl no      - Legacy IPv4 support
dnl test    - Try to enable IPv6 support
AC_ARG_ENABLE(ipv6,
[  --enable-ipv6=yes/no/test
                          use IPv6 [[test]]],
[case "${enableval}" in
  yes|no|test) ipv6=${enableval} ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for --enable-ipv6) ;;
esac], [ipv6=test])
if test x$ipv6 != xno ; then
  ipv6_possible=true
  AC_CHECK_FUNCS([getaddrinfo inet_pton inet_ntop getnameinfo],
[], [ipv6_possible=false])
  if test x$ipv6_possible = xtrue ; then
    AC_MSG_CHECKING([for AF_INET6])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include <sys/types.h>
#include <sys/socket.h>
      ]], [[return AF_INET6;]])], [AC_MSG_RESULT([yes])],
       [AC_MSG_RESULT([no])
        ipv6_possible=false])
  fi
  if test x$ipv6_possible = xfalse && test x$ipv6 = xyes ; then
    AC_MSG_ERROR([Cannot enable IPv6 functionality])
  fi
  if test x$ipv6_possible = xtrue ; then
    AC_DEFINE([IPV6_SUPPORT], [1], [IPv6 Support built in])
  fi
fi

AC_ARG_WITH(readline,
[  --with-readline         support fancy command line editing],
WITH_READLINE=$withval,	dnl yes/no - required to use / never use
WITH_READLINE="maybe"	dnl maybe  - use if found [default]
)

dnl no:   Do not compile client.
dnl auto: Autodetect one.
dnl all:  Autodetect as many as possible.
dnl comma-separated-list: Detect these or abort.
AC_ARG_ENABLE(client,
[  --enable-client[=auto/all/gtk2/sdl/xaw/win32/ftwl/stub]
                          clients to compile [[auto]] (or list for multiple)
                          maintained clients: gtk2/sdl/xaw/stub
                          unmaintained clients: win32/ftwl],
[clients=${enableval}],
[client=auto])

gui_gtk2=no
gui_sdl=no
gui_xaw=no
gui_win32=no
gui_ftwl=no
gui_beos=no
gui_stub=no

dnl AC_PROG_SED is available only in autoconf 2.60 and later.
dnl With older autoconf, assume that 'sed' is ok.
ifdef([AC_PROG_SED], [AC_PROG_SED], [SED=sed])

for gui in $(echo $clients | $SED 's/,/ /g') ; do
  if test "x$gui" = "xno" ; then
    client=no
  elif test "x$gui" = "xauto" ; then
    client=auto
  elif test "x$gui" = "xall" ; then
    client=all
  else
    if test "x$gui" = "xgtk2"   ||
       test "x$gui" = "xgtk2.0" ||
       test "x$gui" = "xgtk20"  ||
       test "x$gui" = "xgtk-2.0" ; then
      gui_gtk2=yes
    elif test "x$gui" = "xgtk" ; then
      AC_MSG_WARN([for requested client 'gtk' enabled gtk2-client, but that default may change in the future])
      gui_gtk2=yes
    else
      if test ! -d "${srcdir}/client/gui-$gui" ; then
        AC_MSG_ERROR(bad value ${gui} for --enable-client)
      fi
      eval "gui_$gui=yes"
    fi
    client=yes
  fi
done

dnl You MUST build ftwl to use the ftwl client
AC_ARG_ENABLE(ftwl,
[  --enable-ftwl[=no/x11/sdl/opengl]
                          compile ftwl [default=no]],
[case "${enableval}" in
  x11)	  ftwl=x11 ;;
  sdl)    ftwl=sdl ;;
  opengl) ftwl=opengl ;;
  *)	  AC_MSG_ERROR(bad value ${enableval} for --enable-ftwl) ;;
esac], [ftwl=no])
AM_CONDITIONAL(FTWL, test x$ftwl != xno)
if test "x$ftwl" != "xno" ; then
  PKG_PROG_PKG_CONFIG
  PKG_CHECK_MODULES([CAIRO], [cairo],,
    [AC_MSG_ERROR([--enable-ftwl requires cairo])])
  FTWL_CFLAGS="$FTWL_CFLAGS $CAIRO_CFLAGS"
  FTWL_LIBS="$FTWL_LIBS $CAIRO_LIBS"
fi

AC_ARG_WITH(xaw,
[  --with-xaw              use the Xaw widget set for the xaw client],
WITH_XAW=1
)

AC_ARG_WITH(xaw3d,
[  --with-xaw3d            use the Xaw3d widget set for the xaw client],
WITH_XAW3D=1
)

if test "x$WITH_XAW" != "x" && test "x$WITH_XAW3D" != "x" ; then
  AC_MSG_ERROR(Cannot use both --with-xaw and --with-xaw3d at the same time)
fi

AC_ARG_ENABLE([svnrev],
[  --enable-svnrev         get svn revision to version information],
[case "${enableval}" in
  yes) svnrev=true  ;;
  no)  svnrev=false ;;
  *)   AC_MSG_ERROR([bad value ${enableval} for --enable-svnrev]) ;;
esac], [svnrev=false])
AM_CONDITIONAL([SVNREV], [test x$svnrev = xtrue])
if test x$svnrev = xtrue ; then
  AC_DEFINE([SVNREV], [1], [Get svn revision information to version number])
fi

AC_ARG_ENABLE(make_data,
[  --disable-make-data     do not recurse make into data directories
                          (ok to disable unless you will 'make install')],
[case "${enableval}" in
  yes) make_data=true ;;
  no)  make_data=false ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for --disable-make-data) ;;
esac], [make_data=true])
AM_CONDITIONAL(MAKE_DATA, test x$make_data = xtrue)

AC_ARG_ENABLE(make_include,
[  --enable-make-include   force make to recurse into include directory
                          (useful for 'make tags')],
[case "${enableval}" in
  yes) make_include=true ;;
  no)  make_include=false ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for --enable-make-include) ;;
esac], [make_include=false])
AM_CONDITIONAL(MAKE_CLIENT_INCLUDE, test "$make_include" = "true")

AC_ARG_ENABLE([auto_deps],
[  --disable-auto-deps     remove automatic deps calcs, which require gmake,gcc],
[case "${enableval}" in
  yes) enable_auto_deps=true ;;
  no)  enable_auto_deps=false;;
  *)   AC_MSG_ERROR([bad value ${enableval} for --enable-auto-deps]) ;;
esac], [enable_auto_deps="maybe"])
AUTO_DEPS=$enable_auto_deps

AC_ARG_WITH(efence,
	[  --with-efence           use Electric Fence, malloc debugger ],
	WITH_EFENCE=1
)

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CPP
AC_PROG_LN_S
AC_DISABLE_SHARED
AC_PROG_LIBTOOL
LIBTOOL="$LIBTOOL --preserve-dup-deps"
AC_SUBST(LIBTOOL)
AC_CHECK_TOOL(AR, ar)
if test -z $AR; then
	AC_MSG_ERROR([*** 'ar' missing.  Install binutils, fix your \$PATH, or set \$AR manually. ***])
fi

AC_CHECK_PROG(UNAME,uname,uname,:)

dnl Programs already checked by AM_INIT_AUTOMAKE:
dnl  AC_PROG_MAKE_SET

dnl Check for libiconv (which is usually included in glibc, but may be
dnl distributed separately).  The libcharset check must come after the
dnl iconv check.  This whole thing must come before the gettext check below.
AM_ICONV
AM_LIBCHARSET
AM_LANGINFO_CODESET
if test "$am_cv_func_iconv" != yes; then
  AC_MSG_ERROR([Iconv is missing. You can get libiconv from http://gnu.org/, \
or try using --with-libiconv-prefix.])
fi
LIBS="$LIBS $LIBICONV"

dnl Autoconf >= 2.60 defines localedir. For older versions of autoconf, we
dnl have to define it here, so that it can be used in po/Makefile.
dnl You cannot use localedir above this line or it will fail for old ac's.
if test -z "$localedir"; then
  localedir="$datadir/locale"
  AC_SUBST(localedir)
fi

dnl I18n support
ALL_LINGUAS="ar cs ca da de el en_GB eo es et fa fi fr ga gd he hu it ja ko lt 
nl nb no pl pt pt_BR ro ru sv tr uk zh_CN"

AC_ARG_ENABLE([nls],
[  --disable-nls        do not add localization support],
[case "${enableval}" in
  yes) USE_NLS=yes ;;
  no)  USE_NLS=no  ;;

  dnl NLS disabled, but 'make dist' allowed. That dist will lack
  dnl all generated localization files.
  no-gmo-dist) USE_NLS=no
               FORCE_DIST=yes ;;
  *)   AC_MSG_ERROR([bad value ${enableval} for --enable-nls]) ;;
esac], [USE_NLS=yes])

if test "$USE_NLS" = "yes" ; then
  AM_GLIB_GNU_GETTEXT

  dnl AM_GLIB_GNU_GETTEXT doesn't have all features we want
  dnl or they don't behave correctly.
  dnl Old gettext binaries don't understand plurals. (ngettext, msgid_plural)
  dnl and there are some problems with missing ngettext.
  dnl Is that ngettext part still true? AM_GLIB_GNU_GETTEXT does check for it

  have_working_ngettext=0
  AC_CHECK_LIB(c, ngettext,
    [AC_MSG_CHECKING(whether libc's ngettext works at runtime)
     FC_CHECK_NGETTEXT_RUNTIME(,have_working_ngettext=1,)],)

  if test "$have_working_ngettext" = "0"; then
    AC_CHECK_LIB(intl, ngettext,
      [AC_MSG_CHECKING(whether libintl's ngettext works at runtime)
       FC_CHECK_NGETTEXT_RUNTIME("-lintl",have_working_ngettext=1,)],)
  fi

  if test "$have_working_ngettext" = "0"; then
    AC_MSG_ERROR(I haven't found a working ngettext function in your system. 
Try --disable-nls. Read ABOUT-NLS.)
  fi

  if test "$IS_BETA_VERSION" = "1" || test "$IS_DEVEL_VERSION" = "1"; then
    AC_MSG_CHECKING(for GNU xgettext version >= 0.10.36)
    xgettext_version=`$XGETTEXT --version 2>&1 | grep GNU | head -n 1 | sed 's/"/ /g'`
    AC_RUN_IFELSE([AC_LANG_SOURCE([[
#include <stdio.h>

const char *version = "$xgettext_version";
int main()
{
  const char *p = version;
  int major = 0, minor = 0, patch = 0;

  while (*p != '\0' && (*p < '0' || *p > '9')) {
    p++;
  }
  if (*p == '\0') {
    return 1;
  }
  sscanf(p, "%d.%d.%d", &major, &minor, &patch);
  if (major < 1 && (minor < 10 || (minor == 10 && patch < 36))) {
    return 1;
  }
  return 0;
}
    ]])],[AC_MSG_RESULT(yes)
    ],[
     AC_MSG_RESULT(no)
     AC_MSG_WARN(You may have problems with creating pox files. \
Please update your gettext package.)   
    
    ],[echo error
    ])

    AC_MSG_CHECKING(for GNU msgfmt version >= 0.10.35)
    msgfmt_version=`$MSGFMT --version 2>&1 | grep GNU | head -n 1 | sed 's/"/ /g'`
    AC_RUN_IFELSE([AC_LANG_SOURCE([[
#include <stdio.h>

const char *version = "$msgfmt_version";

int main()
{
  const char *p = version;
  int major = 0, minor = 0, patch = 0;

  while (*p != '\0' && (*p < '0' || *p > '9')) {
    p++;
  }
  if (*p == '\0') {
    return 1;
  }
  sscanf(p, "%d.%d.%d", &major, &minor, &patch);
  if (major < 1 && (minor < 10 || (minor == 10 && patch < 35))) {
    return 1;
  }
  return 0;
}
    ]])],[AC_MSG_RESULT(yes)
    ],[
    AC_MSG_RESULT(no)
    AC_MSG_ERROR(You are unable to create *.gmo files.
This is development version which doesn't include them. Please update your
gettext package. We recommend you versions >= 0.10.38. Or use 
--disable-nls instead.)
    
    ],[echo error
    ])
  fi
else
  dnl Setup POFILES even when NLS disabled.
  dnl AM_GLIB_GNU_GETTEXT does this when NLS enabled.
  for lang in $ALL_LINGUAS; do
    POFILES="$POFILES $lang.po"
  done
  AC_SUBST([POFILES])
fi

dnl Set debug flags supported by compiler
EXTRA_DEBUG_CFLAGS=""
FC_C_FLAGS([-Wall -Wpointer-arith -Wcast-align -Wmissing-prototypes -Wmissing-declarations -Wno-unused-but-set-variable],
 [], [EXTRA_DEBUG_CFLAGS])

dnl check debugging
FC_DEBUG
dnl check profiling
FC_GPROF
AC_C99_VARIADIC_MACROS
AC_C99_VARIABLE_ARRAYS
AC_C99_INITIALIZERS
AC_C99_STDINT_H

if test "$AUTO_DEPS" = "maybe"; then
   dnl Should also check for gmake?
   if test -n "$GCC"; then
      AUTO_DEPS="yes"
   else
      AUTO_DEPS="no"
   fi
fi
AC_SUBST([AUTO_DEPS])

dnl BeOS-specific settings
if test x`$UNAME -s` = xBeOS ; then
  AC_DEFINE(SOCKET_ZERO_ISNT_STDIN, 1, [BeOS-specific setting])
  CFLAGS="$CFLAGS -Wno-multichar"
  LDFLAGS="$LDFLAGS -x none"
  if test x$enable_debug = xyes ; then
    CFLAGS="$CFLAGS -gdwarf-2"
    LDFLAGS="$LDFLAGS -gdwarf-2"
  fi
  # We used to set ARFLAGS here, but under recent versions of automake this
  # broke compilation on other systems.  Setting ARFLAGS shouldn't be
  # necessary with a working automake.
fi

dnl Defaults
MINGW32=no
AMIGA=no
HOST_PATH_SEPARATOR=":"

dnl Settings specific to host OS
case "$host_os" in

  *mingw32*)
    dnl Windows-specific settings
    MINGW32=yes
    AC_CHECK_TOOL([WINDRES], [windres])
    if test -z $WINDRES; then
	  AC_MSG_ERROR([*** 'windres' missing.  Install binutils, fix your \$PATH, or set \$WINDRES manually. ***])
    fi

    HOST_PATH_SEPARATOR=";"

    AC_DEFINE([SOCKET_ZERO_ISNT_STDIN], [1], [Mingw32-specific setting - stdin])
    AC_DEFINE([ALWAYS_ROOT], [1], [Can execute program as root - Mingw32])
    AC_DEFINE([WIN32_NATIVE], [1], [Mingw32-specific setting - native])
    AC_DEFINE([HAVE_WINSOCK], [1], [Mingw32-specific setting - winsock])
    AC_DEFINE([NONBLOCKING_SOCKETS], [1], [nonblocking sockets support])
    LIBS="$LIBS -lwsock32"
    ;;

  *skyos*)
    dnl SkyOS specific settings
    AC_DEFINE([ALWAYS_ROOT], [1], [Can execute program as root - SkyOS])
    ;;

  *haiku*)
    dnl Haiku specific settings
    AC_DEFINE([ALWAYS_ROOT], [1], [Can execute program as root - Haiku])
    LIBS="$LIBS -lnetwork"
    ;;

  *amigaos*)
    AMIGA=yes
    AC_DEFINE([ALWAYS_ROOT], [1], [Can execute program as root - Amiga])
    ;;

esac

dnl Autoconf provides path separator for build system.
dnl Use that instead of our own guess in case of native build.
if test x$build = x$host ; then
  HOST_PATH_SEPARATOR=$PATH_SEPARATOR
fi

dnl note this has to match the path installed by po/Makefile
if test x"$MINGW32" != "xyes"; then
  CPPFLAGS="$CPPFLAGS -DLOCALEDIR=\"\\\"$localedir\\\"\""
else
  AC_DEFINE_UNQUOTED(LOCALEDIR, "./share/locale", [Locale directory (windows)])
fi

CPPFLAGS="$CPPFLAGS -DBINDIR=\"\\\"$bindir\\\"\""

COMMON_LIBS=-lm
UTILITY_LIBS=

dnl Check for zlib
AC_CHECK_LIB(z, gzgets,
  [AC_DEFINE(HAVE_LIBZ, 1, [zlib is available])
UTILITY_LIBS="$UTILITY_LIBS -lz"
COMMON_LIBS="$COMMON_LIBS -lz"], 
  AC_MSG_ERROR([Could not find zlib library.]))

AC_CHECK_HEADER(zlib.h, , 
  AC_MSG_ERROR([zlib found but not zlib.h.
You may need to install a zlib devel package.]))

AC_PATH_PROG(GZIP, gzip, "no")
if test "$GZIP" = "no"; then
  AC_MSG_ERROR([You need the gzip program for compilation.])
fi

dnl Check for libbzip2
AC_CHECK_LIB(bz2, BZ2_bzReadOpen,
  [AC_CHECK_HEADERS([bzlib.h],
   [AC_DEFINE(HAVE_LIBBZ2, 1, [libbzip2 is available])
UTILITY_LIBS="$UTILITY_LIBS -lbz2"])])

AC_SUBST([UTILITY_LIBS])
AC_SUBST([COMMON_LIBS])

dnl Check and compile ftwl
if test "$ftwl" = x11 ; then
     FTWL_CFLAGS="$FTWL_CFLAGS "`freetype-config --cflags`
     FTWL_LIBS="$FTWL_LIBS -L/usr/X11R6/lib -lX11 -lpng "`freetype-config --libs`
fi

if test "$ftwl" = sdl ; then
     FTWL_CFLAGS="$FTWL_CFLAGS "`sdl-config --cflags`" "`freetype-config --cflags`
     FTWL_LIBS="$FTWL_LIBS "`sdl-config --libs`" -lpng "`freetype-config --libs`
     AC_DEFINE(SDL, 1, [SDL is used])
fi

if test "$ftwl" = opengl ; then
     FTWL_CFLAGS="$FTWL_CFLAGS "`sdl-config --cflags`" "`freetype-config --cflags`
     FTWL_LIBS="$FTWL_LIBS "`sdl-config --libs`" -lpng "`freetype-config --libs -lGL -lGLU`
fi

dnl Check and choose clients
if test "x$client" != "xno"; then

  dnl if specified --with-xaw or --with-xaw3d, assume --enable-client=xaw
  if test -n "$WITH_XAW" || test -n "$WITH_XAW3D"; then
    if test "x$client" = "xauto" ; then
      gui_xaw=yes
      client=yes
    elif test "x$client" = "xall" ; then
      gui_xaw=yes
    fi
  fi

  dnl if need to guess client, announce checking
  if test "x$client" = "xauto"; then
    AS_MESSAGE([checking for which client to compile:...])
  elif test "x$client" = "xall" ; then
    AS_MESSAGE([checking for which clients to compile:...])
  fi

  dnl Gtk-2.0-specific overrides
  FC_GTK2_CLIENT

  dnl SDL-specific overrides
  FC_SDL_CLIENT

  dnl Xaw-specific overrides
  FC_XAW_CLIENT

  if test "x$gui_ftwl" = "xyes" || test "x$client" = "xall" ||
     test "x$client" = "xauto" ; then
    AC_MSG_CHECKING([will compile gui-ftwl])
    if test "x$ftwl" = "xno" ; then
      AC_MSG_RESULT([no])
      if test "x$gui_ftwl" = "xyes" ; then
        AC_MSG_ERROR(You must use --enable-ftwl to compile the ftwl client)
      fi
    else
      AC_MSG_RESULT([yes])
      gui_ftwl=yes
      if test "x$client" = "xauto" ; then
        client=yes
      fi
      GUI_ftwl_CFLAGS="$GUI_ftwl_CFLAGS $FTWL_CFLAGS"
      GUI_ftwl_LIBS="$GUI_ftwl_LIBS $FTWL_LIBS"
    fi
  fi

  dnl BeOS-specific overrides
  if test "x$gui_beos" = "xyes" || test "x$client" = "xall"
     test "x$client" = "xauto" ; then
    AC_MSG_CHECKING([will compile gui-beos])
    if test x`$UNAME -s` = xBeOS ; then
      AC_MSG_RESULT([yes])
      gui_beos=yes
      if test "x$client" = "xauto" ; then
        client=yes
      fi
      GUI_beos_CFLAGS=
      GUI_beos_LIBS="-Lgui-beos/lib -lBdhGame -lBdhDialog -lBdh -ltranslation -lbe -lroot"
    else
      AC_MSG_RESULT([no])
      if test "x$gui_beos" = "xyes" ; then
        AC_MSG_ERROR(The BeOS client is only available on BeOS.)
      fi
    fi
  fi

  dnl Win32-specific overrides
  FC_WIN32_CLIENT

  dnl Stub-specific overrides
  if test "x$gui_stub" = "xyes" || test "x$client" = "xall" ; then
    found_client=yes

    if test "x$found_client" = "xyes"; then
      gui_stub=yes
      if test "x$client" = "xauto" ; then
        client=yes
      fi
      GUI_stub_LIBS="-lm"
    elif test "x$gui_stub" = "xyes"; then
      AC_MSG_ERROR(specified client 'stub' not configurable)
    fi
  fi

  dnl If client still "auto", error out since we couldn't guess it
  if test "x$client" = "xauto" ; then
    AC_MSG_ERROR(could not guess which client to compile)
  fi

  dnl Check for sound support, sets SOUND_CFLAGS, SOUND_LIBS, AUDIO_SDL
  FC_CHECK_SOUND()
fi

if test "x$client" = "xall" ; then
  if test "x$gui_gtk2" = "xyes" ||
     test "x$gui_sdl" = "xyes" ||
     test "x$gui_xaw" = "xyes" ||
     test "x$gui_ftwl" = "xyes" ||
     test "x$gui_win32" = "xyes" ||
     test "x$gui_beos" = "xyes" ||
     test "x$gui_stub" = "xyes" ; then
    client=yes
  else
    client=no
  fi
fi

dnl Check for GGZ
if test "x$gui_gtk2" = "xyes" ; then
  AC_GGZ_CHECK("gtk")
  GUI_gtk2_LIBS="$GUI_gtk2_LIBS $LIB_GGZ_GTK"
else
  AC_GGZ_CHECK
fi
if test "$ggz_server" = "yes" ; then
  AC_CHECK_FUNCS([chdir mkdtemp])
fi

FC_LD_FLAGS(["-Wl,-rpath=${lib_prefix}"], [], [LDFLAGS])

AM_CONDITIONAL([CLIENT], [test "x$client" = "xyes"])

dnl freeciv-modpack checks
modinst=no
AM_PATH_GTK_2_0([2.6.0],
[
  PKG_CHECK_MODULES([GTHREAD], [gthread-2.0],
[
  modinst=yes
  MP_gtk2_CFLAGS="$GTK_CFLAGS $GTHREAD_CFLAGS"
  MP_gtk2_LIBS="$GTK_LIBS $GTHREAD_LIBS"
  if test "x$MINGW32" = "xyes"; then
    dnl Required to compile gtk2 on Windows platform
    MP_gtk2_CFLAGS="$MP_gtk2_CFLAGS -mms-bitfields"
    MP_gtk2_LIBS="$GTK_LIBS"
    MP_gtk2_LDFLAGS="$MP_gtk2_LDFLAGS -mwindows"
  else
    dnl Hack to get a run-time icon -- not needed on Windows
    MP_gtk2_CFLAGS="$MP_gtk2_CFLAGS -DMPICON_PATH=\"\\\"$datadir/freeciv/misc/mpicon.png\\\"\""
  fi
])])
AM_CONDITIONAL([MODINST], [test "x$modinst" = "xyes"])

AC_SUBST([GUI_gtk2_CFLAGS])
AC_SUBST([GUI_gtk2_LIBS])
AC_SUBST([GUI_gtk2_LDFLAGS])
AC_SUBST([GUI_sdl_CFLAGS])
AC_SUBST([GUI_sdl_LIBS])
AC_SUBST([GUI_sdl_LDFLAGS])
AC_SUBST([GUI_xaw_CFLAGS])
AC_SUBST([GUI_xaw_LIBS])
AC_SUBST([GUI_xaw_LDFLAGS])
AC_SUBST([GUI_ftwl_CFLAGS])
AC_SUBST([GUI_ftwl_LIBS])
AC_SUBST([GUI_ftwl_LDFLAGS])
AC_SUBST([GUI_win32_CFLAGS])
AC_SUBST([GUI_win32_LIBS])
AC_SUBST([GUI_win32_LDFLAGS])
AC_SUBST([GUI_stub_CFLAGS])
AC_SUBST([GUI_stub_LIBS])
AC_SUBST([GUI_stub_LDFLAGS])
AC_SUBST([GUI_beos_CFLAGS])
AC_SUBST([GUI_beos_LIBS])
AC_SUBST([GUI_beos_LDFLAGS])
AC_SUBST([MP_gtk2_CFLAGS])
AC_SUBST([MP_gtk2_LIBS])
AC_SUBST([MP_gtk2_LDFLAGS])
AC_SUBST([SOUND_CFLAGS])
AC_SUBST([SOUND_LIBS])
AC_SUBST([FTWL_CFLAGS])
AC_SUBST([VERSION_WITHOUT_LABEL])
AC_SUBST([VERSION_LABEL])
AC_SUBST([HOST_PATH_SEPARATOR])
AM_CONDITIONAL(AUDIO_SDL, test "x$SDL_mixer" = "xyes")
AM_CONDITIONAL(CLIENT_GUI_SDL, test "x$gui_sdl" = "xyes")
AM_CONDITIONAL(CLIENT_GUI_GTK_2_0, test "x$gui_gtk2" = "xyes")
AM_CONDITIONAL(CLIENT_GUI_XAW, test "x$gui_xaw" = "xyes")
AM_CONDITIONAL(CLIENT_GUI_STUB, test "x$gui_stub" = "xyes")
AM_CONDITIONAL(CLIENT_GUI_WIN32, test "x$gui_win32" = "xyes")
AM_CONDITIONAL(CLIENT_GUI_FTWL, test "x$gui_ftwl" = "xyes")
AM_CONDITIONAL(CLIENT_GUI_BEOS, test "x$gui_beos" = "xyes")
AM_CONDITIONAL(FTWL, test "$ftwl" != "no")
AM_CONDITIONAL(FTWL_X11, test "$ftwl" = "x11")
AM_CONDITIONAL(FTWL_SDL, test "$ftwl" = "sdl")
AM_CONDITIONAL(FTWL_OPENGL, test "$ftwl" = "opengl")
AM_CONDITIONAL(MINGW32, test x"$MINGW32" = "xyes")

dnl Additional client libraires:
if test "x$client" = "xyes"; then
    CLIENT_LIBS=" -lm "
    AC_SUBST(CLIENT_LIBS)
fi

dnl Checks for additional server libraries:
if test "x$server" = "xyes"; then
    SERVER_LIBS=" -lm "

    dnl Some systems (e.g., BeOS) need this lib
    AC_CHECK_LIB(bind, gethostbyaddr, SERVER_LIBS="-lbind $SERVER_LIBS")

    dnl Readline library and header files.
    FC_HAS_READLINE()
    AC_SUBST(SERVER_LIBS)
fi

AC_CHECK_LIB(nls,main)

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([fcntl.h sys/time.h sys/types.h unistd.h sys/utsname.h \
                  sys/file.h libintl.h signal.h strings.h])
AC_HEADER_STDBOOL
dnl Avoid including the unix emulation layer if we build mingw executables
dnl There would be type conflicts between winsock and bsd/unix includes
if test "x$MINGW32" != "xyes"; then
  AC_CHECK_HEADERS(arpa/inet.h netdb.h netinet/in.h pwd.h sys/ioctl.h \
                   sys/select.h sys/signal.h sys/socket.h sys/termio.h \
                   sys/uio.h termios.h)
fi
if test "x$gui_xaw" = "xyes" ; then
  dnl Want to get appropriate -I flags:
  fc_save_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $GUI_xaw_CFLAGS"
  AC_CHECK_HEADER(X11/xpm.h, ,
    AC_MSG_ERROR(need X11/xpm.h header; perhaps try/adjust --with-xpm-include))
  CPPFLAGS="$fc_save_CPPFLAGS"
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM
AC_CHECK_TYPES(socklen_t, [], [],
[#include <sys/types.h>
#include <sys/socket.h>
])

dnl Checks for library functions.
AC_FUNC_FORK
AC_FUNC_STRCOLL
AC_FUNC_VPRINTF

dnl Windows vsnprintf doesn't support argument reordering (see PR#12932)
if test "x$MINGW32" != "xyes"; then
AC_FUNC_VSNPRINTF
AC_CHECK_FUNCS([vsnprintf])
fi

AC_CHECK_FUNCS([bind connect fileno flock ftime gethostbyname gethostname \
		getpwuid inet_aton select snooze strcasecmp strcasestr \
		strerror strlcat strlcpy strncasecmp strstr uname usleep \
                getline _strcoll stricoll _stricoll strcasecoll])

AC_MSG_CHECKING(for working gettimeofday)
  FC_CHECK_GETTIMEOFDAY_RUNTIME(,AC_DEFINE(HAVE_GETTIMEOFDAY, 1,
	[Define if the gettimeofday function works and is sane.]),)

dnl Check for extra socket libraries.
dnl If the AC_CHECK_FUNCS check finds the function, we don't look any
dnl further.  This is rumoured to prevent choosing the wrong libs on IRIX.
if test $ac_cv_func_gethostbyname = no; then
  AC_CHECK_LIB(nsl, gethostbyname, LIBS="-lnsl $LIBS")
fi
if test $ac_cv_func_connect = no; then
  AC_CHECK_LIB(socket, connect, LIBS="-lsocket $LIBS")
fi
if test $ac_cv_func_bind = no; then
  AC_CHECK_LIB(bind, gethostbyaddr, LIBS="-lbind $LIBS")
fi

dnl The use of both AC_FUNC_VSNPRINTF and AC_CHECK_FUNCS(vsnprintf) is
dnl deliberate.

dnl Windows fdopen does not work with sockets.
if test "x$MINGW32" != "xyes"; then
  AC_CHECK_FUNCS(fdopen)
fi

dnl We would AC_CHECK_FUNCS for socket as well, except it is complicated
dnl by the fact that the -lsocket is in X_EXTRA_LIBS and/or SERVER_LIBS,
dnl and not in LIBS.

dnl Now check if non blocking sockets are possible
dnl (if fcntl or ioctl exists)

AC_CHECK_FUNC(fcntl,
              [AC_DEFINE(HAVE_FCNTL, 1, [fcntl support])
               AC_DEFINE(NONBLOCKING_SOCKETS, 1, [nonblocking sockets support])],
               [AC_CHECK_FUNC(ioctl, 
                             [AC_DEFINE(HAVE_IOCTL, 1, [ioctl support])
                              AC_DEFINE(NONBLOCKING_SOCKETS, 1, [nonblocking sockets support])])])

dnl Checks if SIGPIPE is usable
AC_MSG_CHECKING([for SIGPIPE])
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <signal.h>]], [[signal (SIGPIPE, SIG_IGN)]])],[AC_MSG_RESULT([yes])
                AC_DEFINE(HAVE_SIGPIPE, 1, [sigpipe support])],[AC_MSG_RESULT([no])])

dnl export where the datadir is going to be installed
FC_EXPAND_DIR(FREECIV_DATADIR, "$datadir/freeciv")

if test x"$MINGW32" = xyes; then
  DEFAULT_DATA_PATH=".;data;~/.freeciv/$DATASUBDIR;$datadir/freeciv"
  DEFAULT_SAVE_PATH=".;~/.freeciv/saves"
  DEFAULT_SCENARIO_PATH=".;data/scenario;~/.freeciv/$DATASUBDIR/scenarios;~/.freeciv/scenarios;$datadir/freeciv/scenario"
else
  DEFAULT_DATA_PATH=".:data:~/.freeciv/$DATASUBDIR:$datadir/freeciv"
  DEFAULT_SAVE_PATH=".:~/.freeciv/saves"
  DEFAULT_SCENARIO_PATH=".:data/scenario:~/.freeciv/$DATASUBDIR/scenarios:~/.freeciv/scenarios:$datadir/freeciv/scenario"
fi
CPPFLAGS="$CPPFLAGS -DDEFAULT_DATA_PATH=\"\\\"$DEFAULT_DATA_PATH\\\"\""
CPPFLAGS="$CPPFLAGS -DDEFAULT_SAVES_PATH=\"\\\"$DEFAULT_SAVES_PATH\\\"\""
CPPFLAGS="$CPPFLAGS -DDEFAULT_SCENARIO_PATH=\"\\\"$DEFAULT_SCENARIO_PATH\\\"\""

dnl This has to be last library
if test -n "$WITH_EFENCE"; then
  AC_CHECK_LIB(efence, malloc, [ 
  if test "x$LIBS" = "x"; then
    LIBS = -lefence
  else
    LIBS="$LIBS -lefence"
  fi])
fi

dnl Checks needed for Lua. Get rid of these if system lua is ever used.
gl_FUNC_MKSTEMP
if test x$gl_cv_func_working_mkstemp = xyes ; then
  AC_DEFINE([HAVE_MKSTEMP], [1], [Have working mkstemp])
fi
AC_CHECK_FUNCS([isatty popen _longjmp])

dnl In the future we probably get rid of our own lua tree and use
dnl lua from system.
dnl LUA_AS_DEPENDENCY should be empty when using lua outside own our tree.
LUA_CFLAGS="-I\$(top_srcdir)/dependencies/lua-5.1/src"
LUA_LIBS="\$(top_builddir)/dependencies/lua-5.1/src/liblua.a"
LUA_AS_DEPENDENCY="$LUA_LIBS"
AC_SUBST([LUA_CFLAGS])
AC_SUBST([LUA_LIBS])
AC_SUBST([LUA_AS_DEPENDENCY])


TOLUA_CFLAGS="-I\$(top_srcdir)/dependencies/tolua-5.1/include"
TOLUA_LIBS="\$(top_builddir)/dependencies/tolua-5.1/src/lib/libtolua.a"
TOLUA_AS_DEPENDENCY="$TOLUA_LIBS"
AC_SUBST([TOLUA_CFLAGS])
AC_SUBST([TOLUA_LIBS])
AC_SUBST([TOLUA_AS_DEPENDENCY])

TOLUA="\$(top_builddir)/dependencies/tolua-5.1/src/bin/tolua$EXEEXT"
AC_SUBST([TOLUA])

dnl Freeciv uses a non-standard macro, Q_(), to handle cases of qualified
dnl translatable strings and macro PL_() to handle plural forms.
dnl Since the Gettext supplied Autoconf support
dnl doesn't seem to have a way to add new keywords to its xgettext call,
dnl we do the following.
dnl The Gettext supplied Autoconf support starts with 'po/Makefile.in.in',
dnl and builds 'po/Makefile.in' then 'po/Makefile'.  In order for the
dnl commonly used _() and N_() macros to work, there should be somewhere
dnl in that 'po/Makefile' a call to xgettext with "--keyword=_" and
dnl "--keyword=N_" as arguments.  To support Q_() and PL_(),
dnl the following simply replaces instances of 
dnl "--keyword=N_" with "--keyword=N_ --keyword=Q_ --keyword=PL_:1,2"
dnl in the 'po/Makefile' file.
AC_CONFIG_COMMANDS([fc_default-1],[[if test -f po/Makefile ; then
     if grep 'keyword=N_ --keyword=Q_ --keyword=PL_:1,2' po/Makefile >/dev/null 2>&1 ; then
       # has already been extended
       :
     else
       echo extending po/Makefile
       mv -f po/Makefile po/Makefile.tmp
       sed -e 's/--keyword=N_/--keyword=N_ --keyword=Q_ --keyword=PL_:1,2/g' po/Makefile.tmp > po/Makefile
       rm po/Makefile.tmp
     fi
   fi]],[[]])

dnl Vast quantities of meaningless errors from xgettext is also annoying.
dnl We fix this by forcing xgettext to assume all files are C source files.
AC_CONFIG_COMMANDS([fc_default-2],[[if test -f po/Makefile ; then
     if grep 'language=C --files-from=\$(srcdir)/POTFILES.in' po/Makefile >/dev/null 2>&1 ; then
       # has already been silenced
       :
     else
       echo silencing po/Makefile
       mv -f po/Makefile po/Makefile.tmp
       sed -e 's/--files-from=$(srcdir)\/POTFILES.in/--language=C --files-from=$(srcdir)\/POTFILES.in/' po/Makefile.tmp > po/Makefile
       rm po/Makefile.tmp
     fi
   fi]],[[]])

dnl Most of the C comments copied to freeciv.pot are spurious; 
dnl change to only copy those with prefix "TRANS:"
dnl Also add --escape to the arguments to convert extended
dnl characters to escape characters.
AC_CONFIG_COMMANDS([fc_default-4],[[if test -f po/Makefile ; then
     if grep 'add-comments="TRANS:" --escape' po/Makefile >/dev/null 2>&1 ; then
       # has already been modified
       :
     else
       echo modifying po/Makefile add-comments/escape
       mv -f po/Makefile po/Makefile.tmp
       sed -e 's/add-comments/add-comments="TRANS:" --escape/' po/Makefile.tmp > po/Makefile
       rm po/Makefile.tmp
     fi
   fi]],[[]])

dnl The BeOS sys/uio.h is broken.  This kludges it out of existence.
dnl (This still causes lots of spurious changes to config.h on BeOS.)
AC_CONFIG_COMMANDS([fc_default-5],[[if test x`uname -s` = xBeOS ; then
     if grep '#define HAVE_SYS_UIO_H 1' config.h >/dev/null 2>&1 ; then
       echo kluging config.h 
       mv -f config.h config.h.tmp
       sed -e 's/#define HAVE_SYS_UIO_H 1/#undef HAVE_SYS_UIO_H/g' config.h.tmp > config.h
       rm config.h.tmp
     fi
   fi]],[[]])

CFLAGS="$EXTRA_DEBUG_CFLAGS $CFLAGS"

dnl Rebuild 'configure' whenever fc_version changes, if maintainer mode enabled.
AC_SUBST([CONFIGURE_DEPENDENCIES], ["$CONFIGURE_DEPENDENCIES \$(top_srcdir)/fc_version"])

dnl Make sure that config.h changes when ever CPPFLAGS or CFLAGS
dnl change so everything gets rebuilt. LDFLAGS is not handled here
dnl since change in it should not cause recompilation, only relinking.
dnl Note: Variables are named FC_STORE_* instead of FC_*_STORE in order to
dnl make them appear next to each other in config.h.  Also single-quotes are
dnl used because some " may appear unescaped within the flag strings.
AC_DEFINE_UNQUOTED([FC_STORE_CPPFLAGS], ['$CPPFLAGS'],
                   [These are the CPPFLAGS used in compilation])
AC_DEFINE_UNQUOTED([FC_STORE_CFLAGS], ['$CFLAGS'],
                   [These are the CFLAGS used in compilation])

AC_CONFIG_FILES([Makefile
          data/Makefile
	  data/civclient.dsc
	  data/civserver.dsc
	  data/civserver.room
	  data/hex2t/Makefile
	  data/amplio2/Makefile
	  data/buildings/Makefile
	  data/flags/Makefile
	  data/misc/Makefile
	  data/trident/Makefile
	  data/isophex/Makefile
	  data/isotrident/Makefile
	  data/stdsounds/Makefile
	  data/default/Makefile
          data/multiplayer/Makefile
	  data/experimental/Makefile
	  data/civ1/Makefile
	  data/civ2/Makefile
	  data/scenario/Makefile
	  data/nation/Makefile
	  data/themes/Makefile
	  data/themes/gui-gtk-2.0/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Arrows/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Buttons/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Check-Radio/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Combo/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Frame-Gap/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Handles/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Lines/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/ListHeaders/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Menu-Menubar/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Others/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Panel/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/ProgressBar/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Range/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Scrollbars/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Shadows/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Spin/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Tabs/Makefile
	  data/themes/gui-gtk-2.0/Freeciv/gtk-2.0/Toolbar/Makefile
	  data/themes/gui-sdl/Makefile
	  data/themes/gui-sdl/human/Makefile
	  data/wonders/Makefile
	  data/icons/Makefile
	  utility/Makefile
	  utility/ftwl/Makefile
	  dependencies/Makefile
	  dependencies/lua-5.1/Makefile
          dependencies/lua-5.1/src/Makefile
	  dependencies/tolua-5.1/Makefile
	  dependencies/tolua-5.1/src/Makefile
	  dependencies/tolua-5.1/src/lib/Makefile
          dependencies/tolua-5.1/src/bin/Makefile
	  common/Makefile
	  common/aicore/Makefile
	  ai/Makefile
	  tests/Makefile
  	  win32/Makefile
	  client/Makefile
	  client/agents/Makefile
	  client/include/Makefile
	  client/gui-sdl/Makefile
	  client/gui-gtk-2.0/Makefile
	  client/gui-xaw/Makefile
	  client/gui-win32/Makefile
	  client/gui-ftwl/Makefile
	  client/gui-stub/Makefile
	  server/Makefile
          server/advisors/Makefile
	  server/generator/Makefile
	  server/scripting/Makefile
	  manual/Makefile
          modinst/Makefile
	  po/Makefile.in
	  doc/Makefile
	  doc/man/Makefile
          doc/man/freeciv-client.6
          doc/man/freeciv-server.6
	  doc/man/freeciv-modpack.6
	  doc/ca/Makefile
	  doc/de/Makefile
	  doc/fr/Makefile
	  doc/it/Makefile
	  doc/ja/Makefile
	  doc/nl/Makefile
	  doc/sv/Makefile
	  freeciv.spec:bootstrap/freeciv.spec.in
	  bootstrap/undep.sh
	  data/Freeciv
	  client/freeciv.desktop:bootstrap/freeciv.desktop.in
	  server/freeciv-server.desktop:bootstrap/freeciv-server.desktop.in
	  modinst/freeciv-modpack.desktop:bootstrap/freeciv-modpack.desktop.in])
AC_CONFIG_FILES([civ:bootstrap/civ.in], [chmod +x civ])
AC_CONFIG_FILES([ser:bootstrap/ser.in], [chmod +x ser])
AC_CONFIG_COMMANDS([default],[[ chmod +x bootstrap/undep.sh ; bootstrap/undep.sh ]],[[]])

if test "$USE_NLS" != "yes" ; then

  dnl Produced config.status will have constant value of FORCE_DIST,
  dnl but it still checks 'if test x$FORCE_DIST = xyes'. We cannot
  dnl do that check in configure when producing config.status.
  AC_CONFIG_COMMANDS([po/Makefile], [
    dnl Usually glib-gettext.m4:AM_GLIB_GNU_GETTEXT outputs commands to
    dnl generate po/Makefile.
    dnl If NLS is disabled, we generate one here.
    rm -f po/Makefile

    dnl - Add nonls_warn as dependency to dist -target
    dnl - Remove dependencies from update-po, so it is never rebuilt
    dnl - Set list of distributed files (no generated files)
    sed -e 's/^dist distdir:.*/dist distdir: nonls_warn/' \
        -e 's/^update-po:.*/update-po:/' \
        -e 's/^DISTFILES =.*/DISTFILES = ChangeLog Makefile.in.in POTFILES.in POTFILES.skip \$(POFILES)/' \
        po/Makefile.in > po/Makefile

    dnl Create nonls_warn target.
    echo >> po/Makefile
    echo nonls_warn: >> po/Makefile
    if test "x$FORCE_DIST" = "xyes" ; then
      echo "	@echo Building dist without generated localization files!" >> po/Makefile
    else
      echo "	@echo Cannot build dist with NLS disabled! && /bin/false" >> po/Makefile
    fi
  ], [FORCE_DIST=$FORCE_DIST])
fi

AC_OUTPUT

AC_MSG_NOTICE([
****************** Configuration Summary ******************

  Build freeciv client:  $client
    Debugging support:     $enable_debug
    Profiling support:     $enable_gprof

  Maintained client frontends:
    Gtk-2.0: $gui_gtk2
    SDL:     $gui_sdl
    Xaw:     $gui_xaw
    Stub:    $gui_stub

  Not maintained client frontends:
  (no guarantee that they even compile)
    Win32:   $gui_win32
    FTWL:    $gui_ftwl

  Build freeciv server:  $server
    Debugging support:     $enable_debug
    Profiling support:     $enable_gprof
    Auth database support: $auth
])

